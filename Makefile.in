# Makefile.in generated by automake 1.6.3 from Makefile.am.
# @configure_input@

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@
SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = .

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_HEADER = $(INSTALL_DATA)
transform = @program_transform_name@
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :

EXEEXT = @EXEEXT@
OBJEXT = @OBJEXT@
PATH_SEPARATOR = @PATH_SEPARATOR@
AMTAR = @AMTAR@
AWK = @AWK@
CC = @CC@
DEPDIR = @DEPDIR@
F77 = @F77@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
PACKAGE = @PACKAGE@
STRIP = @STRIP@
VERSION = @VERSION@
am__include = @am__include@
am__quote = @am__quote@
install_sh = @install_sh@
perlbin = @perlbin@
AUTOMAKE_OPTIONS = foreign

INCLUDES = -I$(prefix)/include -I$(prefix)/toolkit/include -DPROG_VERSION=\"$(PACKAGE)-$(VERSION)\" -I/usr/local/include

bin_PROGRAMS = \
 build_dual_zr \
 build_gauge_db \
 build_pmm_zr_table \
 build_single_zr \
 build_zr_histo \
 build_zr_table \
 eyalqc \
 first2ascii \
 gauge_gui.pl \
 get_2A53_data_over_gauge \
 get_radar_data_over_gauge \
 listdb \
 merge_radarNgauge_data  \
 merge_zr_histo \
 query_gauge_db \
 scale_zr_table \
 validate_gauge_db


build_dual_zr_SOURCES = build_dual_zr.c zr.c zr.h zr_table.h
build_gauge_db_SOURCES = build_gauge_db.c gauge_db.c gauge_db.h
build_pmm_zr_table_SOURCES = build_pmm_zr_table.c 2A53.h zr_utils.c zr_utils.h zr.c zr.h
build_single_zr_SOURCES = build_single_zr.c zr.c zr.h zr_table.h
build_zr_histo_SOURCES = build_zr_histo.c zr_utils.c zr_utils.h zr.c zr.h
build_zr_table_SOURCES = build_zr_table.c zr.c zr.h zr_table.h getopt.c getopt1.c getopt.h
eyalqc_SOURCES = eyalqc.f
first2ascii_SOURCES = first2ascii.c get_radar_data_over_gauge_db.h zr.h  output.c gauge_db.c gauge_db.h
gauge_gui_pl_SOURCES = 
gauge_gui_pl_DEPENDENCIES = eyalqc
get_2A53_data_over_gauge_SOURCES = get_2A53_data_over_gauge.c utils.c output.c gauge_db.c gauge_db.h get_2A53_data_over_gauge.h
get_radar_data_over_gauge_SOURCES = get_radar_data_over_gauge.c get_radar_data_over_gauge.h zr.h gauge_db.h 2A53.h output.c utils.c gauge_db.c
listdb_SOURCES = listdb.c
merge_radarNgauge_data_SOURCES = merge_radarNgauge_data.c gauge_db.h utils.c gauge_db.c gauge_db.h
merge_zr_histo_SOURCES = merge_zr_histo.c zr_utils.c zr_utils.h zr.c zr.h
query_gauge_db_SOURCES = query_gauge_db.c gauge_db.c gauge_db.h
scale_zr_table_SOURCES = scale_zr_table.c zr.c zr.h  zr_table.h
validate_gauge_db_SOURCES = validate_gauge_db.c gauge_db.c gauge_db.h

bin_SCRIPTS = $(regular_scripts) $(xforms_scripts)
regular_scripts = \
          accum_plot.cmd \
          automatic_qc.pl \
          automatic_zr.pl \
          merge_2nd_zr_intermediate_files \
          gauge_filter.pl \
          gauge_gui_main.pl \
          gauge_qc.pl \
          gauge_radar_accum.pl \
          gauge_radar_nonzero.pl \
          gauge_radar_plot_batch.pl \
          gauge_radar_plot_filter.pl \
          gauge_radar_plot_subtract.pl \
          make_gauge_filter_file.pl \
          make_when_table \
          process_first_zr_inter_product_for_non_hdf_files \
          process_first_zr_inter_product_for_tape \
          process_first_zr_inter_product_for_tapes \
          r_over_g.pl \
          sort_zr_intermediate_ascii \
          sort_zr_intermediate_ascii_by_time \
          synthesize_gauge.pl


xforms_scripts = gauge_gui.pl

scripts = $(bin_SCRIPTS)

EXTRA_DIST = gauge_gui.fd $(doc_DATA) $(scripts) CHANGES CHECKLIST \
             Copyright GPL

CLEANFILES = gauge_gui.pl 

docdir = $(prefix)/doc/build_zr_table
doc_DATA = \
      automatic_qc.html \
      build_gauge_db.html \
      build_zr_table.html \
      automatic_zr.html \
      build_pmm_zr_table.html \
      gauge_filter.html \
      gauge_gui.html \
      gauge_gui_screenshot.html \
      gauge_qc.html \
      gauge_radar_accum.html \
      get_2A53_data_over_gauge.html \
      get_radar_data_over_gauge.html \
      merge_radarNgauge_data.html \
      r_over_g.html \
      sort_zr_intermediate_ascii.html \
      zr.html \
      zr_content.html \
      zr_diagram.gif \
      to_zr_logo.gif \
      zr_logo.gif \
      gauge_gui_main.gif \
      gauge_gui_data.gif \
      gauge_gui_gauges.gif \
	  README CHANGES

subdir = .
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
bin_PROGRAMS = build_dual_zr$(EXEEXT) build_gauge_db$(EXEEXT) \
	build_pmm_zr_table$(EXEEXT) build_single_zr$(EXEEXT) \
	build_zr_histo$(EXEEXT) build_zr_table$(EXEEXT) eyalqc$(EXEEXT) \
	first2ascii$(EXEEXT) gauge_gui.pl$(EXEEXT) \
	get_2A53_data_over_gauge$(EXEEXT) \
	get_radar_data_over_gauge$(EXEEXT) listdb$(EXEEXT) \
	merge_radarNgauge_data$(EXEEXT) merge_zr_histo$(EXEEXT) \
	query_gauge_db$(EXEEXT) scale_zr_table$(EXEEXT) \
	validate_gauge_db$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_build_dual_zr_OBJECTS = build_dual_zr.$(OBJEXT) zr.$(OBJEXT)
build_dual_zr_OBJECTS = $(am_build_dual_zr_OBJECTS)
build_dual_zr_LDADD = $(LDADD)
build_dual_zr_DEPENDENCIES =
build_dual_zr_LDFLAGS =
am_build_gauge_db_OBJECTS = build_gauge_db.$(OBJEXT) gauge_db.$(OBJEXT)
build_gauge_db_OBJECTS = $(am_build_gauge_db_OBJECTS)
build_gauge_db_LDADD = $(LDADD)
build_gauge_db_DEPENDENCIES =
build_gauge_db_LDFLAGS =
am_build_pmm_zr_table_OBJECTS = build_pmm_zr_table.$(OBJEXT) \
	zr_utils.$(OBJEXT) zr.$(OBJEXT)
build_pmm_zr_table_OBJECTS = $(am_build_pmm_zr_table_OBJECTS)
build_pmm_zr_table_LDADD = $(LDADD)
build_pmm_zr_table_DEPENDENCIES =
build_pmm_zr_table_LDFLAGS =
am_build_single_zr_OBJECTS = build_single_zr.$(OBJEXT) zr.$(OBJEXT)
build_single_zr_OBJECTS = $(am_build_single_zr_OBJECTS)
build_single_zr_LDADD = $(LDADD)
build_single_zr_DEPENDENCIES =
build_single_zr_LDFLAGS =
am_build_zr_histo_OBJECTS = build_zr_histo.$(OBJEXT) zr_utils.$(OBJEXT) \
	zr.$(OBJEXT)
build_zr_histo_OBJECTS = $(am_build_zr_histo_OBJECTS)
build_zr_histo_LDADD = $(LDADD)
build_zr_histo_DEPENDENCIES =
build_zr_histo_LDFLAGS =
am_build_zr_table_OBJECTS = build_zr_table.$(OBJEXT) zr.$(OBJEXT) \
	getopt.$(OBJEXT) getopt1.$(OBJEXT)
build_zr_table_OBJECTS = $(am_build_zr_table_OBJECTS)
build_zr_table_LDADD = $(LDADD)
build_zr_table_DEPENDENCIES =
build_zr_table_LDFLAGS =
am_eyalqc_OBJECTS = eyalqc.$(OBJEXT)
eyalqc_OBJECTS = $(am_eyalqc_OBJECTS)
eyalqc_LDADD = $(LDADD)
eyalqc_DEPENDENCIES =
eyalqc_LDFLAGS =
am_first2ascii_OBJECTS = first2ascii.$(OBJEXT) output.$(OBJEXT) \
	gauge_db.$(OBJEXT)
first2ascii_OBJECTS = $(am_first2ascii_OBJECTS)
first2ascii_LDADD = $(LDADD)
first2ascii_DEPENDENCIES =
first2ascii_LDFLAGS =
am_gauge_gui_pl_OBJECTS =
gauge_gui_pl_OBJECTS = $(am_gauge_gui_pl_OBJECTS)
gauge_gui_pl_LDADD = $(LDADD)
gauge_gui_pl_LDFLAGS =
am_get_2A53_data_over_gauge_OBJECTS = get_2A53_data_over_gauge.$(OBJEXT) \
	utils.$(OBJEXT) output.$(OBJEXT) gauge_db.$(OBJEXT)
get_2A53_data_over_gauge_OBJECTS = \
	$(am_get_2A53_data_over_gauge_OBJECTS)
get_2A53_data_over_gauge_LDADD = $(LDADD)
get_2A53_data_over_gauge_DEPENDENCIES =
get_2A53_data_over_gauge_LDFLAGS =
am_get_radar_data_over_gauge_OBJECTS = \
	get_radar_data_over_gauge.$(OBJEXT) output.$(OBJEXT) \
	utils.$(OBJEXT) gauge_db.$(OBJEXT)
get_radar_data_over_gauge_OBJECTS = \
	$(am_get_radar_data_over_gauge_OBJECTS)
get_radar_data_over_gauge_LDADD = $(LDADD)
get_radar_data_over_gauge_DEPENDENCIES =
get_radar_data_over_gauge_LDFLAGS =
am_listdb_OBJECTS = listdb.$(OBJEXT)
listdb_OBJECTS = $(am_listdb_OBJECTS)
listdb_LDADD = $(LDADD)
listdb_DEPENDENCIES =
listdb_LDFLAGS =
am_merge_radarNgauge_data_OBJECTS = merge_radarNgauge_data.$(OBJEXT) \
	utils.$(OBJEXT) gauge_db.$(OBJEXT)
merge_radarNgauge_data_OBJECTS = $(am_merge_radarNgauge_data_OBJECTS)
merge_radarNgauge_data_LDADD = $(LDADD)
merge_radarNgauge_data_DEPENDENCIES =
merge_radarNgauge_data_LDFLAGS =
am_merge_zr_histo_OBJECTS = merge_zr_histo.$(OBJEXT) zr_utils.$(OBJEXT) \
	zr.$(OBJEXT)
merge_zr_histo_OBJECTS = $(am_merge_zr_histo_OBJECTS)
merge_zr_histo_LDADD = $(LDADD)
merge_zr_histo_DEPENDENCIES =
merge_zr_histo_LDFLAGS =
am_query_gauge_db_OBJECTS = query_gauge_db.$(OBJEXT) gauge_db.$(OBJEXT)
query_gauge_db_OBJECTS = $(am_query_gauge_db_OBJECTS)
query_gauge_db_LDADD = $(LDADD)
query_gauge_db_DEPENDENCIES =
query_gauge_db_LDFLAGS =
am_scale_zr_table_OBJECTS = scale_zr_table.$(OBJEXT) zr.$(OBJEXT)
scale_zr_table_OBJECTS = $(am_scale_zr_table_OBJECTS)
scale_zr_table_LDADD = $(LDADD)
scale_zr_table_DEPENDENCIES =
scale_zr_table_LDFLAGS =
am_validate_gauge_db_OBJECTS = validate_gauge_db.$(OBJEXT) \
	gauge_db.$(OBJEXT)
validate_gauge_db_OBJECTS = $(am_validate_gauge_db_OBJECTS)
validate_gauge_db_LDADD = $(LDADD)
validate_gauge_db_DEPENDENCIES =
validate_gauge_db_LDFLAGS =
SCRIPTS = $(bin_SCRIPTS)


DEFS = @DEFS@
DEFAULT_INCLUDES =  -I. -I$(srcdir) -I.
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
@AMDEP_TRUE@DEP_FILES = ./$(DEPDIR)/build_dual_zr.Po \
@AMDEP_TRUE@	./$(DEPDIR)/build_gauge_db.Po \
@AMDEP_TRUE@	./$(DEPDIR)/build_pmm_zr_table.Po \
@AMDEP_TRUE@	./$(DEPDIR)/build_single_zr.Po \
@AMDEP_TRUE@	./$(DEPDIR)/build_zr_histo.Po \
@AMDEP_TRUE@	./$(DEPDIR)/build_zr_table.Po \
@AMDEP_TRUE@	./$(DEPDIR)/first2ascii.Po ./$(DEPDIR)/gauge_db.Po \
@AMDEP_TRUE@	./$(DEPDIR)/get_2A53_data_over_gauge.Po \
@AMDEP_TRUE@	./$(DEPDIR)/get_radar_data_over_gauge.Po \
@AMDEP_TRUE@	./$(DEPDIR)/getopt.Po ./$(DEPDIR)/getopt1.Po \
@AMDEP_TRUE@	./$(DEPDIR)/listdb.Po \
@AMDEP_TRUE@	./$(DEPDIR)/merge_radarNgauge_data.Po \
@AMDEP_TRUE@	./$(DEPDIR)/merge_zr_histo.Po ./$(DEPDIR)/output.Po \
@AMDEP_TRUE@	./$(DEPDIR)/query_gauge_db.Po \
@AMDEP_TRUE@	./$(DEPDIR)/scale_zr_table.Po ./$(DEPDIR)/utils.Po \
@AMDEP_TRUE@	./$(DEPDIR)/validate_gauge_db.Po ./$(DEPDIR)/zr.Po \
@AMDEP_TRUE@	./$(DEPDIR)/zr_utils.Po
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CFLAGS = @CFLAGS@
F77COMPILE = $(F77) $(AM_FFLAGS) $(FFLAGS)
F77LD = $(F77)
F77LINK = $(F77LD) $(AM_FFLAGS) $(FFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
FFLAGS = @FFLAGS@
DIST_SOURCES = $(build_dual_zr_SOURCES) $(build_gauge_db_SOURCES) \
	$(build_pmm_zr_table_SOURCES) $(build_single_zr_SOURCES) \
	$(build_zr_histo_SOURCES) $(build_zr_table_SOURCES) \
	$(eyalqc_SOURCES) $(first2ascii_SOURCES) \
	$(gauge_gui_pl_SOURCES) $(get_2A53_data_over_gauge_SOURCES) \
	$(get_radar_data_over_gauge_SOURCES) $(listdb_SOURCES) \
	$(merge_radarNgauge_data_SOURCES) $(merge_zr_histo_SOURCES) \
	$(query_gauge_db_SOURCES) $(scale_zr_table_SOURCES) \
	$(validate_gauge_db_SOURCES)
DATA = $(doc_DATA)

DIST_COMMON = README Makefile.am Makefile.in aclocal.m4 config.h.in \
	configure configure.in depcomp install-sh missing mkinstalldirs
SOURCES = $(build_dual_zr_SOURCES) $(build_gauge_db_SOURCES) $(build_pmm_zr_table_SOURCES) $(build_single_zr_SOURCES) $(build_zr_histo_SOURCES) $(build_zr_table_SOURCES) $(eyalqc_SOURCES) $(first2ascii_SOURCES) $(gauge_gui_pl_SOURCES) $(get_2A53_data_over_gauge_SOURCES) $(get_radar_data_over_gauge_SOURCES) $(listdb_SOURCES) $(merge_radarNgauge_data_SOURCES) $(merge_zr_histo_SOURCES) $(query_gauge_db_SOURCES) $(scale_zr_table_SOURCES) $(validate_gauge_db_SOURCES)

all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .c .f .o .obj

am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)

$(top_builddir)/config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck
$(srcdir)/configure:  $(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)
	cd $(srcdir) && $(AUTOCONF)

$(ACLOCAL_M4):  configure.in 
	cd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)

config.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status config.h

$(srcdir)/config.h.in:  $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOHEADER)
	touch $(srcdir)/config.h.in

distclean-hdr:
	-rm -f config.h stamp-h1
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
build_dual_zr$(EXEEXT): $(build_dual_zr_OBJECTS) $(build_dual_zr_DEPENDENCIES) 
	@rm -f build_dual_zr$(EXEEXT)
	$(LINK) $(build_dual_zr_LDFLAGS) $(build_dual_zr_OBJECTS) $(build_dual_zr_LDADD) $(LIBS)
build_gauge_db$(EXEEXT): $(build_gauge_db_OBJECTS) $(build_gauge_db_DEPENDENCIES) 
	@rm -f build_gauge_db$(EXEEXT)
	$(LINK) $(build_gauge_db_LDFLAGS) $(build_gauge_db_OBJECTS) $(build_gauge_db_LDADD) $(LIBS)
build_pmm_zr_table$(EXEEXT): $(build_pmm_zr_table_OBJECTS) $(build_pmm_zr_table_DEPENDENCIES) 
	@rm -f build_pmm_zr_table$(EXEEXT)
	$(LINK) $(build_pmm_zr_table_LDFLAGS) $(build_pmm_zr_table_OBJECTS) $(build_pmm_zr_table_LDADD) $(LIBS)
build_single_zr$(EXEEXT): $(build_single_zr_OBJECTS) $(build_single_zr_DEPENDENCIES) 
	@rm -f build_single_zr$(EXEEXT)
	$(LINK) $(build_single_zr_LDFLAGS) $(build_single_zr_OBJECTS) $(build_single_zr_LDADD) $(LIBS)
build_zr_histo$(EXEEXT): $(build_zr_histo_OBJECTS) $(build_zr_histo_DEPENDENCIES) 
	@rm -f build_zr_histo$(EXEEXT)
	$(LINK) $(build_zr_histo_LDFLAGS) $(build_zr_histo_OBJECTS) $(build_zr_histo_LDADD) $(LIBS)
build_zr_table$(EXEEXT): $(build_zr_table_OBJECTS) $(build_zr_table_DEPENDENCIES) 
	@rm -f build_zr_table$(EXEEXT)
	$(LINK) $(build_zr_table_LDFLAGS) $(build_zr_table_OBJECTS) $(build_zr_table_LDADD) $(LIBS)
eyalqc$(EXEEXT): $(eyalqc_OBJECTS) $(eyalqc_DEPENDENCIES) 
	@rm -f eyalqc$(EXEEXT)
	$(F77LINK) $(eyalqc_LDFLAGS) $(eyalqc_OBJECTS) $(eyalqc_LDADD) $(LIBS)
first2ascii$(EXEEXT): $(first2ascii_OBJECTS) $(first2ascii_DEPENDENCIES) 
	@rm -f first2ascii$(EXEEXT)
	$(LINK) $(first2ascii_LDFLAGS) $(first2ascii_OBJECTS) $(first2ascii_LDADD) $(LIBS)
get_2A53_data_over_gauge$(EXEEXT): $(get_2A53_data_over_gauge_OBJECTS) $(get_2A53_data_over_gauge_DEPENDENCIES) 
	@rm -f get_2A53_data_over_gauge$(EXEEXT)
	$(LINK) $(get_2A53_data_over_gauge_LDFLAGS) $(get_2A53_data_over_gauge_OBJECTS) $(get_2A53_data_over_gauge_LDADD) $(LIBS)
get_radar_data_over_gauge$(EXEEXT): $(get_radar_data_over_gauge_OBJECTS) $(get_radar_data_over_gauge_DEPENDENCIES) 
	@rm -f get_radar_data_over_gauge$(EXEEXT)
	$(LINK) $(get_radar_data_over_gauge_LDFLAGS) $(get_radar_data_over_gauge_OBJECTS) $(get_radar_data_over_gauge_LDADD) $(LIBS)
listdb$(EXEEXT): $(listdb_OBJECTS) $(listdb_DEPENDENCIES) 
	@rm -f listdb$(EXEEXT)
	$(LINK) $(listdb_LDFLAGS) $(listdb_OBJECTS) $(listdb_LDADD) $(LIBS)
merge_radarNgauge_data$(EXEEXT): $(merge_radarNgauge_data_OBJECTS) $(merge_radarNgauge_data_DEPENDENCIES) 
	@rm -f merge_radarNgauge_data$(EXEEXT)
	$(LINK) $(merge_radarNgauge_data_LDFLAGS) $(merge_radarNgauge_data_OBJECTS) $(merge_radarNgauge_data_LDADD) $(LIBS)
merge_zr_histo$(EXEEXT): $(merge_zr_histo_OBJECTS) $(merge_zr_histo_DEPENDENCIES) 
	@rm -f merge_zr_histo$(EXEEXT)
	$(LINK) $(merge_zr_histo_LDFLAGS) $(merge_zr_histo_OBJECTS) $(merge_zr_histo_LDADD) $(LIBS)
query_gauge_db$(EXEEXT): $(query_gauge_db_OBJECTS) $(query_gauge_db_DEPENDENCIES) 
	@rm -f query_gauge_db$(EXEEXT)
	$(LINK) $(query_gauge_db_LDFLAGS) $(query_gauge_db_OBJECTS) $(query_gauge_db_LDADD) $(LIBS)
scale_zr_table$(EXEEXT): $(scale_zr_table_OBJECTS) $(scale_zr_table_DEPENDENCIES) 
	@rm -f scale_zr_table$(EXEEXT)
	$(LINK) $(scale_zr_table_LDFLAGS) $(scale_zr_table_OBJECTS) $(scale_zr_table_LDADD) $(LIBS)
validate_gauge_db$(EXEEXT): $(validate_gauge_db_OBJECTS) $(validate_gauge_db_DEPENDENCIES) 
	@rm -f validate_gauge_db$(EXEEXT)
	$(LINK) $(validate_gauge_db_LDFLAGS) $(validate_gauge_db_OBJECTS) $(validate_gauge_db_LDADD) $(LIBS)
binSCRIPT_INSTALL = $(INSTALL_SCRIPT)
install-binSCRIPTS: $(bin_SCRIPTS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f $$d$$p; then \
	    f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	    echo " $(binSCRIPT_INSTALL) $$d$$p $(DESTDIR)$(bindir)/$$f"; \
	    $(binSCRIPT_INSTALL) $$d$$p $(DESTDIR)$(bindir)/$$f; \
	  else :; fi; \
	done

uninstall-binSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/build_dual_zr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/build_gauge_db.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/build_pmm_zr_table.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/build_single_zr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/build_zr_histo.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/build_zr_table.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/first2ascii.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gauge_db.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/get_2A53_data_over_gauge.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/get_radar_data_over_gauge.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/getopt.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/getopt1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/listdb.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/merge_radarNgauge_data.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/merge_zr_histo.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/output.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/query_gauge_db.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scale_zr_table.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/utils.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/validate_gauge_db.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/zr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/zr_utils.Po@am__quote@

distclean-depend:
	-rm -rf ./$(DEPDIR)

.c.o:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<

.c.obj:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(COMPILE) -c `cygpath -w $<`
CCDEPMODE = @CCDEPMODE@

.f.o:
	$(F77COMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.f.obj:
	$(F77COMPILE) -c -o $@ `cygpath -w $<`
uninstall-info-am:
docDATA_INSTALL = $(INSTALL_DATA)
install-docDATA: $(doc_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(docdir)
	@list='$(doc_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(docDATA_INSTALL) $$d$$p $(DESTDIR)$(docdir)/$$f"; \
	  $(docDATA_INSTALL) $$d$$p $(DESTDIR)$(docdir)/$$f; \
	done

uninstall-docDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(doc_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(docdir)/$$f"; \
	  rm -f $(DESTDIR)$(docdir)/$$f; \
	done

ETAGS = etags
ETAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = .
distdir = $(PACKAGE)-$(VERSION)

am__remove_distdir = \
  { test ! -d $(distdir) \
    || { find $(distdir) -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr $(distdir); }; }

GZIP_ENV = --best
distcleancheck_listfiles = find . -type f -print

distdir: $(DISTFILES)
	$(am__remove_distdir)
	mkdir $(distdir)
	@list='$(DISTFILES)'; for file in $$list; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	-find $(distdir) -type d ! -perm -777 -exec chmod a+rwx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(SHELL) $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r $(distdir)
dist-gzip: distdir
	$(AMTAR) chof - $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist dist-all: distdir
	$(AMTAR) chof - $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	$(am__remove_distdir)
	GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | $(AMTAR) xf -
	chmod -R a-w $(distdir); chmod a+w $(distdir)
	mkdir $(distdir)/=build
	mkdir $(distdir)/=inst
	chmod a-w $(distdir)
	dc_install_base=`$(am__cd) $(distdir)/=inst && pwd` \
	  && cd $(distdir)/=build \
	  && ../configure --srcdir=.. --prefix=$$dc_install_base \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && (test `find $$dc_install_base -type f -print | wc -l` -le 1 \
	      || { echo "ERROR: files left after uninstall:" ; \
	           find $$dc_install_base -type f -print ; \
	           exit 1; } >&2 ) \
	  && $(MAKE) $(AM_MAKEFLAGS) dist-gzip \
	  && rm -f $(distdir).tar.gz \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck
	$(am__remove_distdir)
	@echo "$(distdir).tar.gz is ready for distribution" | \
	  sed 'h;s/./=/g;p;x;p;x'
distcleancheck: distclean
	if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) $(SCRIPTS) $(DATA) config.h

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(bindir) $(DESTDIR)$(bindir) $(DESTDIR)$(docdir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am: install-docDATA

install-exec-am: install-binPROGRAMS install-binSCRIPTS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf autom4te.cache
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

uninstall-am: uninstall-binPROGRAMS uninstall-binSCRIPTS \
	uninstall-docDATA uninstall-info-am

.PHONY: GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic dist dist-all dist-gzip distcheck distclean \
	distclean-compile distclean-depend distclean-generic \
	distclean-hdr distclean-tags distcleancheck distdir dvi dvi-am \
	info info-am install install-am install-binPROGRAMS \
	install-binSCRIPTS install-data install-data-am install-docDATA \
	install-exec install-exec-am install-info install-info-am \
	install-man install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic tags \
	uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-binSCRIPTS uninstall-docDATA uninstall-info-am


utils.o: zr.h Makefile
gauge_db.o: gauge_db.h Makefile
output.o: get_radar_data_over_gauge.h zr.h get_radar_data_over_gauge_db.h gauge_db.h

gauge_gui.pl$(EXEEXT): gauge_gui.fd Makefile
	-fdesign -convert -perl gauge_gui.fd > /dev/null 2>&1

automatic_qc.pl: Makefile
	@for p in $(regular_scripts); do \
	   echo -n "Checking file $$p ... ";\
	   cp $$p $$p.in;\
	   sed -e 's&PROG_VERSION[ ]*=.*&PROG_VERSION = \"$(PACKAGE)-$(VERSION)\";&' \
		-e 's&#\!.*perl&#\! $(perlbin)&' \
		-e 's&(\@INC,.*&(\@INC, \".\", \"$(bindir)\"\)\;&' \
	   < $$p.in > $$p.new;\
	   if cmp -s $$p $$p.new; then \
          rm $$p.new; \
          echo "$$p remains untouched."; \
       else \
          mv $$p.new $$p; \
          echo "substitutions made in $$p."; \
		  chmod +x $$p; \
       fi;\
	   rm -f $$p.in;\
    done
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
