#! /usr/bin/perl
#-+-Perl-+-
#
#  process_first_zr_inter_product_for_tapes - 
#       Run 'process_first_zr_inter_product_for_tape' for multiple tapeids.
#
#
#--------------------------------------------------------------------------
#
# By:
#
#     Ngoc-Thuy Nguyen
#     Science Systems and Applications, Inc. (SSAI)
#     NASA/TRMM Office
#     nguyen@trmm.gsfc.nasa.gov
#     October 31, 1997
# 
#     Copyright (C) 1998
#
#***************************************************************************
unshift (@INC, ".", "/usr/local/trmm/GVBOX/bin");
do 'gv_utilities.pl';
$PROG_VERSION = "build_zr_table-v1.14";
print STDERR "Which program: $0\n";
print STDERR "Version: $PROG_VERSION\n";

$first_time_exit_handler = 1;
@tape_id_list = ();
$outfile = $save_curr_dir."zr_first_intermediate";
$this_prog_dirname = "zr_$$/";
$top_working_dir = $save_curr_dir.$this_prog_dirname;

do process_args(@ARGV);
do do_system_call("mkdir -p $top_working_dir");
print STDERR "$this_prog: Will work in <$top_working_dir>...\n";
chdir $top_working_dir;  #

print STDERR "@tape_id_list\n";
while (@tape_id_list) {
	local($tape_id) = shift(@tape_id_list);
	local($cmd) = "process_first_zr_inter_product_for_tape $prog_options -f $outfile $tape_id";
	print STDERR "Executing <$cmd>..\n";
	do do_system_call($cmd);
}
do clean_up();
print STDERR "$this_prog: Successful.\n";
exit(0); # Successful
########################### Subroutines ################################

sub usage {
	print STDERR "Usage ($PROG_VERSION): Radar Data over Gauge Extraction for Multiple Tapes.\n";
	print STDERR "    $this_prog [-i top_input_dir] \n",
                 "        [-o actual_program_option_file]\n",    
                 "        [-f outfile] tapeID [tapeIDs...]\n";
	print STDERR " Where,\n",
	             "  -i:   Specify the top input dir where 'gvs_<prod>_<tapeID>'s are.\n",
                 "        <prod> := 2A-54 | 2A-55. Product files may be compressed. Default: ./\n",
                 "  -o:   Specify the option filename. File contains options to\n",
                 "        'get_radar_data_over_gauge'.  Default: \"\".\n";
	print STDERR "  -f:   Specify output filename. Default: zr_first_intermediate. The file \n",
                 "        will be appended if it exists.\n";

	exit(-1);

}

sub process_args {
	local(@arglist) = @_;
	if ($#arglist < 0) {
		do usage();
	}
	local($str) = "";
	while ($#arglist >= 0) {
		$str = shift @arglist;

		if ($str eq "-i") {
			local($tmp_str) = shift @arglist;
			do  usage() if ($tmp_str eq "" || $tmp_str =~ /^\-/);
			$prog_options = "$prog_options -i ".&change2absolute_filename($save_curr_dir, $tmp_str);
		}

		elsif ($str eq "-o") {
			local($tmp_str) = shift @arglist;
			do  usage() if ($tmp_str eq "" || $tmp_str =~ /^\-/);
			$prog_options = "$prog_options -o ".&change2absolute_filename($save_curr_dir, $tmp_str);
		}
		elsif ($str eq "-f") {
			local($tmp_str) = shift @arglist;
			do  usage() if ($tmp_str eq "" || $tmp_str =~ /^\-/);
			$outfile= &change2absolute_filename($save_curr_dir, $tmp_str);
		}

		else {
			unshift(arglist, $str);
			last;
		}
	}

	@tape_id_list = @arglist;

	do usage() if ($#tape_id_list < 0);
}


sub do_system_call {
	local($cmd) = @_;
	# REturn 0 for successful
	local($rc) = 0;
#print STDERR "CMD::::::<$cmd>\n\n";
	system($cmd);
	local($status) = $? >> 8;
	local($signal) = $? & 255;
	if ($status == -2 || $stat ==254 || $signal != 0) {   # interrupted
		setpgrp();     # Set process group.
		kill $signal, 0;    # Kill process group.
		while (wait != -1) {;}
		exit(-1) if ($signal != 0); # interrupted
		exit(2);
	}

	return 0 if $status == 0;
	return -1;
}

sub clean_up {
	chdir $save_curr_dir;    # Go back to the original dir.
	system("rm -r $top_working_dir") 
		if ($top_working_dir ne "" && -d $top_working_dir);
}


sub doexit_handler {
	local($signal) = @_;
    # Ignore signals 
	do ignore_catched_signals();
	local($rc) = $SEVERE_ERROR_CODE;
	if ($signal eq 'INT' || $signal eq 'KILL' || $signal eq 'STOP' ||
		$signal == 9 || $signal == 2) {
		$rc = $INTER_CODE;
	}
	if ($first_time_exit_handler) {
		$first_time_exit_handler = 0;
		print STDERR "$this_prog: Received signal <$signal>\n";
		do clean_up();
	}
	exit($rc);
}







